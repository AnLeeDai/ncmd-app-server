# Nginx configuration for production (optimized for 512MB RAM / 0.1 CPU)
worker_processes 1;

events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    keepalive_timeout 2;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Upstream to PHP-FPM
    upstream php {
        server 127.0.0.1:9000;
    }

    server {
    listen 0.0.0.0:${PORT};
        server_name _;

        # Overload protection: if the monitor creates /tmp/OVERLOAD, return 503 for new requests
        if (-f /tmp/OVERLOAD) {
            return 503;
        }
        root /var/www/html/public;
        index index.php index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Handle static files
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Handle PHP files
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_pass php;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_read_timeout 60;
            fastcgi_send_timeout 60;
            fastcgi_connect_timeout 60;
        }

        # Handle Laravel routes
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
        }

            # 503 handler for overload state: attach Retry-After header and return a short message
            error_page 503 @overload;
            location @overload {
                add_header Retry-After 10;
                add_header Content-Type text/plain;
                return 503 'Service temporarily unavailable';
            }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}